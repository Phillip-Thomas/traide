
    # def _get_reward(self, prev_value, current_value, action):
        # # Base return calculation
        # pct_return = (current_value - prev_value) / (prev_value + 1e-9)
        
        # # Get RSI and MACD for timing
        # rsi = compute_RSI(self.prices[max(0, self.idx - 15):self.idx + 1])
        # macd = compute_MACD(self.prices[max(0, self.idx - 27):self.idx + 1])
        
        # # Calculate multiple momentum timeframes
        # short_window = self.prices[max(0, self.idx - 5):self.idx + 1]
        # medium_window = self.prices[max(0, self.idx - 20):self.idx + 1]
        
        # short_momentum = (short_window[-1] / short_window[0] - 1) if len(short_window) > 1 else 0
        # medium_momentum = (medium_window[-1] / medium_window[0] - 1) if len(medium_window) > 1 else 0
        
        # # Enhanced position holding bonus
        # holding_bonus = 0.0
        # if self.position == 1:
        #     duration = self.idx - self.entry_idx
        #     if pct_return > 0:
        #         holding_bonus = 0.0125 * np.log1p(duration)  # Doubled bonus for holding
        
        # # Enhanced buy/sell timing rewards
        # timing_reward = 0.0
        # if action == 1:  # Buy
        #     # Strong buy conditions (multiple timeframes)
        #     if short_momentum < -0.001 and medium_momentum < -0.02 and rsi < 40 and macd < 0:
        #         timing_reward = 0.1  # Increased reward for strong signals
        #     elif short_momentum < -0.001 and rsi < 40:
        #         timing_reward = 0.025  # Small reward for moderate signals
        #     else:
        #         timing_reward = -0.005  # Stronger penalty for buying without signals
                
        # elif action == 2:  # Sell
        #     # Strong sell conditions
        #     if short_momentum > 0.001 and rsi > 60:
        #         timing_reward = 0.1
        #     elif self.position == 1:
        #         if pct_return > 0.02:  # 2% profit target
        #             timing_reward = 0.04  # Reward for taking significant profits
        #         elif pct_return < 0:
        #             timing_reward = -0.01  # Penalty for selling at loss
        
        # # Base reward scaling
        # intermediate_reward = pct_return * 100.0
        
        # # Increased transaction costs
        # if action in [1, 2]:
        #     intermediate_reward -= 0.005  # Doubled transaction cost
        
        # # Sell completion reward
        # if action == 2 and self.position == 1:
        #     trade_return = (self.prices[self.idx] - self.entry_price) / (self.entry_price + 1e-9)
        #     trade_reward = trade_return * 100.0
        #     return trade_reward + intermediate_reward + timing_reward

        
        # return intermediate_reward + holding_bonus + timing_reward